// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Document {
  id          String         @id @default(cuid())
  title       String
  content     String
  isDraft     Boolean        @default(true)
  status      DocumentStatus @default(DRAFT)
  folderId    String?
  folder      Folder?        @relation(fields: [folderId], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  versions    DocumentVersion[]
  formats     DocumentFormat[]
  playbooks   Playbook[]
  formatFeedback FormatFeedback[]
  
  @@map("documents")
}

enum DocumentStatus {
  DRAFT
  FINISHED
}

model Topic {
  id        String   @id @default(cuid())
  title     String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("topics")
}

model DocumentVersion {
  id         String   @id @default(cuid())
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  content    String
  version    Int
  createdAt  DateTime @default(now())
  
  @@map("document_versions")
}

model Folder {
  id        String     @id @default(cuid())
  name      String
  parentId  String?
  parent    Folder?    @relation("FolderHierarchy", fields: [parentId], references: [id])
  children  Folder[]   @relation("FolderHierarchy")
  documents Document[]
  createdAt DateTime   @default(now())
  
  @@map("folders")
}

model ContextDocument {
  id        String   @id @default(cuid())
  filename  String
  content   String
  s3Key     String   @unique
  createdAt DateTime @default(now())
  
  @@map("context_documents")
}

model Format {
  id              String           @id @default(cuid())
  name            String           @unique
  platform        String
  prompt          String
  postsCount      Int              @default(1)
  contextFiles    String?          // JSON array of S3 keys
  postingRules    PostingRule[]
  documentFormats DocumentFormat[]
  feedback        FormatFeedback[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@map("formats")
}

model PostingRule {
  id            String @id @default(cuid())
  formatId      String
  format        Format @relation(fields: [formatId], references: [id], onDelete: Cascade)
  frequency     Int    // posts per week
  dayOfWeek     Int?   // 0-6, null for any day
  timeOfDay     String? // HH:MM format
  
  @@map("posting_rules")
}

model DocumentFormat {
  id           String            @id @default(cuid())
  documentId   String
  document     Document          @relation(fields: [documentId], references: [id], onDelete: Cascade)
  formatId     String
  format       Format            @relation(fields: [formatId], references: [id])
  content      String
  status       DocumentFormatStatus @default(PENDING)
  scheduledFor DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  
  @@unique([documentId, formatId])
  @@map("document_formats")
}

model CalendarPost {
  id               String   @id @default(cuid())
  documentFormatId String   @unique
  title            String
  content          String
  platform         String
  scheduledDate    DateTime
  status           CalendarPostStatus @default(SCHEDULED)
  createdAt        DateTime @default(now())
  
  @@map("calendar_posts")
}

model FormatFeedback {
  id         String   @id @default(cuid())
  formatId   String
  format     Format   @relation(fields: [formatId], references: [id], onDelete: Cascade)
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  feedback   String
  createdAt  DateTime @default(now())
  
  @@map("format_feedback")
}

enum DocumentFormatStatus {
  PENDING
  APPROVED
  REJECTED
}

model Ikigai {
  id        String   @id @default(cuid())
  mission   String
  purpose   String
  values    String
  goals     String
  audience  String
  voice     String
  enemy     String?  // What you stand against/oppose (optional for backward compatibility)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  
  @@map("ikigai")
}

model Playbook {
  id              String         @id @default(cuid())
  title           String
  description     String?
  sourceDocumentId String?
  sourceDocument  Document?      @relation(fields: [sourceDocumentId], references: [id])
  content         String         // JSON structure for steps/activities
  prompt          String         // AI prompt for generating playbook
  slides          PlaybookSlide[]
  isDraft         Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@map("playbooks")
}

model PlaybookSlide {
  id          String   @id @default(cuid())
  playbookId  String
  playbook    Playbook @relation(fields: [playbookId], references: [id], onDelete: Cascade)
  order       Int
  title       String
  content     String   // Rich text content
  layout      String   @default("text") // text, image-text, image-grid, etc.
  images      String?  // JSON array of image URLs/S3 keys
  position    String?  // JSON for drag-drop positioning
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("playbook_slides")
}

model PlaybookTemplate {
  id          String   @id @default(cuid())
  name        String
  description String
  prompt      String   // Default prompt for this template type
  structure   String   // JSON template structure
  createdAt   DateTime @default(now())
  
  @@map("playbook_templates")
}

enum CalendarPostStatus {
  SCHEDULED
  PUBLISHED
  CANCELLED
}
